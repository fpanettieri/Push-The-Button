//  This file is part of the official Playtomic API for ActionScript 3 games.  //  Playtomic is a real time analytics platform for casual games //  and services that go in casual games.  If you haven't used it //  before check it out://  http://playtomic.com/////  Created by ben at the above domain on 2/25/11.//  Copyright 2011 Playtomic LLC. All rights reserved.////  Documentation is available at://  http://playtomic.com/api/as3//// PLEASE NOTE:// You may modify this SDK if you wish but be kind to our servers.  Be// careful about modifying the analytics stuff as it may give you // borked reports.//// If you make any awesome improvements feel free to let us know!//// -------------------------------------------------------------------------// THIS SOFTWARE IS PROVIDED BY PLAYTOMIC, LLC "AS IS" AND ANY// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.package Playtomic{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.external.ExternalInterface;	import flash.net.URLLoader;	import flash.net.URLRequest;		public final class LogRequest	{		private static var Failed:int = 0;		private static var Pool:Array = new Array();				private var Sender:URLLoader;		private var Target:URLRequest;		private var Data:String = "";		private var BaseUrl:String;		public var Ready:Boolean = false;		public static function Create():LogRequest		{			var request:LogRequest = Pool.length > 0 ? Pool.pop() as LogRequest : new LogRequest();			request.Data = "";			request.Ready = false;						return request;		}		public function LogRequest()		{			this.Sender = new URLLoader();			this.Sender.addEventListener(Event.COMPLETE, this.Complete);			this.Sender.addEventListener(IOErrorEvent.IO_ERROR, this.IOErrorHandler);			this.Sender.addEventListener(HTTPStatusEvent.HTTP_STATUS, this.StatusChange);			this.Sender.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.SecurityErrorHandler);								this.Target = new URLRequest();			this.BaseUrl = "http://g" + Log.GUID + ".api.playtomic.com/tracker/q.aspx?swfid=" + Log.SWFID;		}				public function MassQueue(data:Array):void		{			if(Failed > 3)				return;						for(var i:int=data.length-1; i>-1; i--)			{				this.Data += (this.Data == "" ? "" : "~") + data[i];				data.splice(i, 1);				if(this.Data.length > 300)				{					var request:LogRequest = Create();					request.MassQueue(data);										this.Ready = true;					this.Send();									return;				}			}						Log.Request = this;		}				public function Queue(data:String):void		{			if(Failed > 3)				return;						this.Data += (this.Data == "" ? "" : "~") + data;			if(this.Data.length > 300)			{				this.Ready = true;			}		}		public function Send():void		{			if(this.Data == "")				return;			this.Target.url = this.BaseUrl + "&q=" + this.Data + "&url=" + Log.SourceUrl + "&" + Math.random() + "z"			this.Sender.load(this.Target);		}				private function Complete(e:Event = null):void		{			if(this.Data.indexOf("v/") == 0 || this.Data.indexOf("~v/") > -1)			{				Log.IncreaseViews();			}			if(this.Data.indexOf("p/") == 0 || this.Data.indexOf("~p/") > -1)			{				Log.IncreasePlays();			}			Pool.push(this);		}		private function IOErrorHandler(e:IOErrorEvent):void		{			Failed++;		}		private function SecurityErrorHandler(e:SecurityErrorEvent):void		{		}		private function StatusChange(e:HTTPStatusEvent):void		{		}	}}