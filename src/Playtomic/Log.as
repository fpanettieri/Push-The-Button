//  This file is part of the official Playtomic API for ActionScript 3 games.  //  Playtomic is a real time analytics platform for casual games //  and services that go in casual games.  If you haven't used it //  before check it out://  http://playtomic.com/////  Created by ben at the above domain on 2/25/11.//  Copyright 2011 Playtomic LLC. All rights reserved.////  Documentation is available at://  http://playtomic.com/api/as3//// PLEASE NOTE:// You may modify this SDK if you wish but be kind to our servers.  Be// careful about modifying the analytics stuff as it may give you // borked reports.//// If you make any awesome improvements feel free to let us know!//// -------------------------------------------------------------------------// THIS SOFTWARE IS PROVIDED BY PLAYTOMIC, LLC "AS IS" AND ANY// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.package Playtomic{	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.SharedObject;	import flash.system.Security;	import flash.utils.Timer;	public final class Log	{		// API settings		public static var Enabled:Boolean = false;		public static var Queue:Boolean = true;				// SWF settings		public static var SWFID:int = 0;		public static var GUID:String = "";		public static var SourceUrl:String;		public static var BaseUrl:String;			// play timer, goal tracking etc		public static var Cookie:SharedObject;		public static var Request:LogRequest;		private static const PingF:Timer = new Timer(60000);		private static const PingR:Timer = new Timer(30000);		private static var FirstPing:Boolean = true;		private static var Pings:int = 0;		private static var Plays:int = 0;		private static var HighestGoal:int = 0;						private static var Frozen:Boolean = false;		private static var FrozenQueue:Array = new Array();		// unique, logged metrics		private static var Customs:Array = new Array();		private static var LevelCounters:Array = new Array();		private static var LevelAverages:Array = new Array();		private static var LevelRangeds:Array = new Array();		// ------------------------------------------------------------------------------		// View		// Logs a view and initialises the SWFStats API		// ------------------------------------------------------------------------------		public static function View(swfid:int = 0, guid:String = "", defaulturl:String = ""):void		{			if(SWFID > 0)				return;			SWFID = swfid;			GUID = guid;			Enabled = true;			if((SWFID == 0 || GUID == ""))			{				Enabled = false;				return;			}			// Check the URL is http					if(defaulturl.indexOf("http://") != 0 && Security.sandboxType != "localWithNetwork" && Security.sandboxType != "localTrusted")			{				Enabled = false;				return;			}						SourceUrl = GetUrl(defaulturl);			if(SourceUrl == null || SourceUrl == "" || SourceUrl.indexOf("https://") == 0)			{				Enabled = false;				return;			}						// Load the security context			Security.loadPolicyFile("http://g" + Log.GUID + ".api.playtomic.com/crossdomain.xml");					// Log the view (first or repeat visitor)			Request = LogRequest.Create();			Cookie = SharedObject.getLocal("playtomic");						var views:int = GetCookie("views");			Send("v/" + (views + 1), true);			// Start the play timer			PingF.addEventListener(TimerEvent.TIMER, PingServer);			PingF.start();		}		public static function IncreaseViews():void		{			var views:int = GetCookie("views");			views++;			SaveCookie("views", views);		}		public static function IncreasePlays():void		{			Plays++;		}		// ------------------------------------------------------------------------------		// Play		// Logs a play.		// ------------------------------------------------------------------------------		public static function Play():void		{									if(!Enabled)				return;			LevelCounters = new Array();			LevelAverages = new Array();			LevelRangeds = new Array();							Send("p/" + (Plays + 1), true);		}		// ------------------------------------------------------------------------------		// Ping		// Tracks how long the player's session lasts.  First ping is at 60 seconds after		// which it occurs every 30 seconds.		// ------------------------------------------------------------------------------		private static function PingServer(...args):void		{						if(!Enabled)				return;							Pings++;						Send("t/" + (FirstPing ? "y" : "n") + "/" + Pings, true);							if(FirstPing)			{				PingF.stop();				PingR.addEventListener(TimerEvent.TIMER, PingServer);				PingR.start();				FirstPing = false;			}		}				// ------------------------------------------------------------------------------		// CustomMetric		// Logs a custom metric event.		// ------------------------------------------------------------------------------		public static function CustomMetric(name:String, group:String = null, unique:Boolean = false):void		{					if(!Enabled)				return;			if(group == null)				group = "";			if(unique)			{				if(Customs.indexOf(name) > -1)					return;				Customs.push(name);			}						Send("c/" + Clean(name) + "/" + Clean(group));		}		// ------------------------------------------------------------------------------		// LevelCounterMetric, LevelRangedMetric, LevelAverageMetric		// Logs an event for each level metric type.		// ------------------------------------------------------------------------------		public static function LevelCounterMetric(name:String, level:*, unique:Boolean = false):void		{					if(!Enabled)				return;			if(unique)			{				var key:String = name + "." + level.toString();								if(LevelCounters.indexOf(key) > -1)					return;				LevelCounters.push(key);			}						Send("lc/" + Clean(name) + "/" + Clean(level));		}				public static function LevelRangedMetric(name:String, level:*, value:int, unique:Boolean = false):void		{						if(!Enabled)				return;			if(unique)			{				var key:String = name + "." + level.toString();								if(LevelRangeds.indexOf(key) > -1)					return;				LevelRangeds.push(key);			}						Send("lr/" + Clean(name) + "/" + Clean(level) + "/" + value);		}		public static function LevelAverageMetric(name:String, level:*, value:int, unique:Boolean = false):void		{			if(!Enabled)				return;			if(unique)			{				var key:String = name + "." + level.toString();								if(LevelAverages.indexOf(key) > -1)					return;				LevelAverages.push(key);			}						Send("la/" + Clean(name) + "/" + Clean(level) + "/" + value);		}		// ------------------------------------------------------------------------------		// Links		// tracks the uniques/totals/fails for links		// ------------------------------------------------------------------------------		public static function Link(url:String, name:String, group:String, unique:int, total:int, fail:int):void		{			if(!Enabled)				return;						Send("l/" + Clean(name) + "/" + Clean(group) + "/" + Clean(url) + "/" + unique + "/" + total + "/" + fail);		}		// ------------------------------------------------------------------------------		// Heatmaps		// a custom metric with x/y data for heatmaps		// ------------------------------------------------------------------------------		public static function Heatmap(name:String, group:String, x:int, y:int):void		{			if(!Enabled)				return;						Send("h/" + Clean(name) + "/" + Clean(group) + "/" + x + "/" + y);		}		// ------------------------------------------------------------------------------		// Funnels		// tracks the player's progress through a set of linear events		// ------------------------------------------------------------------------------		public static function Funnel(name:String, step:String, stepnum:int):void		{			if(!Enabled)				return;						Send("f/" + Clean(name) + "/" + Clean(step) + "/" + stepnum);		}		// ------------------------------------------------------------------------------		// Player levels		// metrics for user-created levels		// ------------------------------------------------------------------------------		public static function PlayerLevelStart(levelid:String):void		{			if(!Enabled)				return;						Send("pls/" + levelid);		}		public static function PlayerLevelWin(levelid:String):void		{			if(!Enabled)				return;						Send("plw/" + levelid);		}		public static function PlayerLevelQuit(levelid:String):void		{			if(!Enabled)				return;						Send("plq/" + levelid);		}		public static function PlayerLevelFlag(levelid:String):void		{			if(!Enabled)				return;						Send("plf/" + levelid);		}				public static function PlayerLevelRetry(levelid:String):void		{			if(!Enabled)				return;						Send("plr/" + levelid);		}				// ------------------------------------------------------------------------------		// Freezing		// Pauses / unpauses the API		// ------------------------------------------------------------------------------		public static function Freeze():void		{			Frozen = true;		}		public static function UnFreeze():void		{			Frozen = false;			Request.MassQueue(FrozenQueue);		}		public static function ForceSend():void		{			if(!Enabled)			  	return;						if(Request == null)			  	Request = LogRequest.Create();			Request.Send();			Request = LogRequest.Create();						if(FrozenQueue.length > 0)				Request.MassQueue(FrozenQueue);		}				// ------------------------------------------------------------------------------		// Send		// Creates and sends the url requests to the tracking service.		// ------------------------------------------------------------------------------		private static function Send(s:String, view:Boolean = false):void		{			if(Frozen)			{				FrozenQueue.push(s);				return;			}						Request.Queue(s);			if(Request.Ready || view || !Queue)			{				Request.Send();				Request = LogRequest.Create();			}		}				private static function Clean(s:String):String		{			while(s.indexOf("/") > -1)				s = s.replace("/", "\\");							while(s.indexOf("~") > -1)				s = s.replace("~", "-");											return escape(s);		}			// ------------------------------------------------------------------------------		// GetCookie and SetCookie		// Records or retrieves data like how many times the person has played your		// game.		// ------------------------------------------------------------------------------		private static function GetCookie(n:String):int		{			if(Cookie.data[n] == undefined)			{				return 0;			}			else			{				return int(Cookie.data[n]);			}		}				private static function SaveCookie(n:String, v:int):void		{			Cookie.data[n] = v.toString();			Cookie.flush();		}			// ------------------------------------------------------------------------------		// GetUrl		// Tries to identify the actual page url, and if it's unable to it reverts to 		// the default url you passed the View method.  If you're testing the game it		// should revert to http://local-testing/.		// ------------------------------------------------------------------------------		private static function GetUrl(defaulturl:String):String		{			var url:String;						if(ExternalInterface.available)			{				try				{					url = String(ExternalInterface.call("window.location.href.toString"));				}				catch(s:Error)				{					url = defaulturl;				}			}			else if(defaulturl.indexOf("http://") == 0 || defaulturl.indexOf("https://") == 0)			{				url = defaulturl;			}			if(url == null  || url == "" || url == "null")			{				if(Security.sandboxType == "localWithNetwork" || Security.sandboxType == "localTrusted")				{					url = "http://local-testing/";				}				else				{					url = null;				}			}			return escape(url);		}	}}