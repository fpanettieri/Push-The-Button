//  This file is part of the official Playtomic API for ActionScript 3 games.  //  Playtomic is a real time analytics platform for casual games //  and services that go in casual games.  If you haven't used it //  before check it out://  http://playtomic.com/////  Created by ben at the above domain on 2/25/11.//  Copyright 2011 Playtomic LLC. All rights reserved.////  Documentation is available at://  http://playtomic.com/api/as3//// PLEASE NOTE:// You may modify this SDK if you wish but be kind to our servers.  Be// careful about modifying the analytics stuff as it may give you // borked reports.//// If you make any awesome improvements feel free to let us know!//// -------------------------------------------------------------------------// THIS SOFTWARE IS PROVIDED BY PLAYTOMIC, LLC "AS IS" AND ANY// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR// PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.package Playtomic{	import flash.events.IOErrorEvent;	import flash.events.HTTPStatusEvent;	import flash.events.SecurityErrorEvent;	import flash.events.Event;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLRequestMethod;	import flash.external.ExternalInterface;		public class Leaderboards	{		public static const TODAY:String = "today";		public static const LAST7DAYS:String = "last7days";		public static const LAST30DAYS:String = "last30days";		public static const ALLTIME:String = "alltime";		public static const NEWEST:String = "newest";				public static function CreatePrivateLeaderboard(table:String, permalink:String, callback:Function = null, highest:Boolean=true):void		{			var sendaction:URLLoader = new URLLoader();			var handled:Boolean = false;			if(callback != null)			{				var bridge:Function = function():void				{						if(callback == null || handled)						return;											handled = true;										var data:XML = XML(sendaction["data"]);					var status:int = parseInt(data["status"]);					var errorcode:int = parseInt(data["errorcode"]);										var leaderboard:PrivateLeaderboard = new PrivateLeaderboard(data["tableid"], table, data["bitly"], data["permalink"], data["highest"] == "true", data["realname"]);					callback(leaderboard, new Response(status, errorcode));				}				sendaction.addEventListener(Event.COMPLETE, bridge);			}			var fail:Function = function():void			{				if(callback == null || handled)					return;									handled = true;				callback(null, Response.GeneralFailure());			}						var httpstatusignore:Function = function():void {}						var postdata:URLVariables = new URLVariables();			postdata["table"] = table;			postdata["highest"] = highest ? "y" : "n";			postdata["permalink"] = permalink;						var request:URLRequest = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/create.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			request.data = postdata;			request.method = URLRequestMethod.POST;							sendaction.addEventListener(IOErrorEvent.IO_ERROR, fail);			sendaction.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatusignore);			sendaction.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fail);			sendaction.load(request);		}				public static function LoadPrivateLeaderboard(tableid:String, callback:Function=null):void		{			var sendaction:URLLoader = new URLLoader();			var handled:Boolean = false;			if(callback != null)			{				var bridge:Function = function():void				{						if(callback == null || handled)						return;											handled = true;										var data:XML = XML(sendaction["data"]);					var status:int = parseInt(data["status"]);					var errorcode:int = parseInt(data["errorcode"]);										var responseData:PrivateLeaderboard = new PrivateLeaderboard(tableid, data["name"], data["bitly"], data["permalink"], data["highest"] == "true" ? true : false, data["realname"]);					callback(responseData, new Response(status, errorcode));				}				sendaction.addEventListener(Event.COMPLETE, bridge);			}			var fail:Function = function():void			{				if(callback == null || handled)					return;									handled = true;				callback(null, Response.GeneralFailure());			}						var httpstatusignore:Function = function():void {}						var postdata:URLVariables = new URLVariables();			postdata["tableid"] = tableid;						var request:URLRequest = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/load.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			request.data = postdata;			request.method = URLRequestMethod.POST;									sendaction.addEventListener(IOErrorEvent.IO_ERROR, fail);			sendaction.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatusignore);			sendaction.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fail);			sendaction.load(request);		}				public static function GetLeaderboardFromUrl():String		{			if(!ExternalInterface.available)				return null;							try			{				var url:String = String(ExternalInterface.call("window.location.href.toString"));								if(url.indexOf("?") == -1)					return null;									var leaderboardid:String = url.substring(url.indexOf("leaderboard=") + 12);								if(leaderboardid.indexOf("&") > -1)					leaderboardid = leaderboardid.substring(0, leaderboardid.indexOf("&"))				if(leaderboardid.indexOf("#") > -1)					leaderboardid = leaderboardid.substring(0, leaderboardid.indexOf("#"))				return leaderboardid;			}			catch(s:Error)			{							}								return null;		}				public static function SaveAndList(score:PlayerScore, table:String, callback:Function = null, options:Object=null):void		{			if(options == null)				options = new Object();						var allowduplicates:Boolean = options.hasOwnProperty("allowduplicates") ? options["allowduplicates"] : false;			var global:Boolean = options.hasOwnProperty("global") ? options["global"] : true;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			var mode:String = options.hasOwnProperty("mode") ? options["mode"] : "alltime";			var customfilters:Object = options.hasOwnProperty("customfilters") ? options["customfilters"] : {};			var page:int = options.hasOwnProperty("page") ? options["page"] : 1;			var perpage:int = options.hasOwnProperty("perpage") ? options["perpage"] : 20;			var friendslist:Array = options.hasOwnProperty("friendslist") ? options["friendslist"] : new Array();						var sendaction:URLLoader = new URLLoader();			var handled:Boolean = false;			if(callback != null)			{				var bridge:Function = function():void				{						if(callback == null || handled)						return;											handled = true;					ProcessScores(sendaction, callback);				}				sendaction.addEventListener(Event.COMPLETE, bridge);			}			var fail:Function = function():void			{				if(callback == null || handled)					return;									handled = true;				callback([], 0, Response.GeneralFailure());			}						var httpstatusignore:Function = function():void	{}						var postdata:URLVariables = new URLVariables();						var numfilters:int = 0;						if(customfilters != null)			{				for(var fkey:String in customfilters)				{					postdata["ckey" + numfilters] = fkey;					postdata["cdata" + numfilters] = escape(customfilters[fkey]);					numfilters++;				}			}						var numfields:int = 0;						if(score.CustomData != null)//CustomData from PlayerScore.as			{				for(var dkey:String in score.CustomData)				{					postdata["ckey" + numfields] = dkey;					postdata["cdata" + numfields] = escape(score.CustomData[dkey]);					numfields++;				}			}						// save options			postdata["url"] = Log.SourceUrl;			postdata["table"] = escape(table);			postdata["highest"] = highest ? "y" : "n";			postdata["name"] = escape(score.Name);			postdata["points"] = score.Points.toString();			postdata["allowduplicates"] = allowduplicates ? "y" : "n";			postdata["auth"] = Encode.MD5(Log.SourceUrl + score.Points.toString());			postdata["numfields"] = numfields;						// list options			postdata["global"] = global ? "y" : "n";			postdata["mode"] = mode;			postdata["page"] = page;			postdata["perpage"] = perpage;			postdata["numfilters"] = numfilters;						var request:URLRequest;						if(score.FBUserId != "" && score.FBUserId != null)			{				if(friendslist.length > 0)					postdata["friendslist"] = friendslist.join(",");								postdata["fbuserid"] = score.FBUserId;				request = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/saveandlistfb.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			}			else			{				request = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/saveandlist.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			}						request.data = postdata;			request.method = URLRequestMethod.POST;									sendaction.addEventListener(IOErrorEvent.IO_ERROR, fail);			sendaction.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatusignore);			sendaction.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fail);			sendaction.load(request);		}				//callback signature: callback(score:PlayerScore, response:Response):void		public static function Save(score:PlayerScore, table:String, callback:Function = null, options:Object = null):void		{			if(options == null)				options = new Object();						var allowduplicates:Boolean = options.hasOwnProperty("allowduplicates") ? options["allowduplicates"] : false;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			var sendaction:URLLoader = new URLLoader();			var handled:Boolean = false;			if(callback != null)			{				var bridge:Function = function():void				{					if(callback == null || handled)						return;											handled = true;										var data:XML = XML(sendaction["data"]);					var status:int = parseInt(data["status"]);										if(status == 1)					{											score.SDate = new Date();						score.RDate = "Just now";					}										callback(score, new Response(status, data["errorcode"]));				}				sendaction.addEventListener(Event.COMPLETE, bridge);			}			var fail:Function = function():void			{				if(callback == null || handled)					return;														handled = true;				callback(score, Response.GeneralFailure());			}						var httpstatusignore:Function = function():void	{}			// save the score			var s:String = score.Points.toString();						if(s.indexOf(".") > -1)				s = s.substring(0, s.indexOf("."));						var postdata:URLVariables = new URLVariables();			var customfields:int = 0;						if(score.CustomData != null)			{				for(var key:String in score.CustomData)				{					postdata["ckey" + customfields] = key;					postdata["cdata" + customfields] = escape(score.CustomData[key]);					customfields++;				}			}						postdata["url"] = Log.SourceUrl;			postdata["table"] = escape(table);			postdata["highest"] = highest ? "y" : "n";			postdata["name"] = escape(score.Name);			postdata["points"] = s;			postdata["allowduplicates"] = allowduplicates ? "y" : "n";			postdata["auth"] = Encode.MD5(Log.SourceUrl + s);			postdata["fb"] = score.FBUserId != "" && score.FBUserId != null ? "y" : "n";			postdata["fbuserid"] = score.FBUserId;			postdata["customfields"] = customfields;						var request:URLRequest = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/save.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			request.data = postdata;			request.method = URLRequestMethod.POST;			sendaction.addEventListener(IOErrorEvent.IO_ERROR, fail);			sendaction.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatusignore);			sendaction.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fail);			sendaction.load(request);		}				//callback signature: callback(scores:Array, numscores:int, response:Response):void		public static function List(table:String, callback:Function, options:Object = null):void		{			if(options == null)				options = new Object();						var global:Boolean = options.hasOwnProperty("global") ? options["global"] : true;			var highest:Boolean = options.hasOwnProperty("highest") ? options["highest"] : true;			var mode:String = options.hasOwnProperty("mode") ? options["mode"] : "alltime";			var customfilters:Object = options.hasOwnProperty("customfilters") ? options["customfilters"] : new Object();			var page:int = options.hasOwnProperty("page") ? options["page"] : 1;			var perpage:int = options.hasOwnProperty("perpage") ? options["perpage"] : 20;			var facebook:Boolean = options.hasOwnProperty("facebook") ? options["facebook"] : false;			var friendslist:Array = options.hasOwnProperty("friendslist") ? options["friendslist"] : new Array();			var sendaction:URLLoader = new URLLoader();			var handled:Boolean = false;						if(callback != null)			{				var bridge:Function = function():void				{						if(callback == null || handled)						return;					handled = true;					ProcessScores(sendaction, callback);				}				sendaction.addEventListener(Event.COMPLETE, bridge);			}			var fail:Function = function():void			{				if(callback == null || handled)					return;									handled = true;				callback([], 0, Response.GeneralFailure());			}						var httpstatusignore:Function = function():void {}						var postdata:URLVariables = new URLVariables();			var numfilters:int = 0;						for(var key:String in customfilters)			{				postdata["ckey" + numfilters] = key;				postdata["cdata" + numfilters] = escape(customfilters[key]);				numfilters++;			}						postdata["url"] = (global || Log.SourceUrl == null ? "global" : Log.SourceUrl) 			postdata["mode"] = mode;			postdata["page"] = page;			postdata["perpage"] = perpage;			postdata["highest"] = highest ? "y" : "n";			postdata["customfilters"] = numfilters;			postdata["table"] = escape(table);						var request:URLRequest;						if(facebook)			{				if(friendslist.length > 0)					postdata["friendslist"] = friendslist.join(",");				request = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/listfb.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			}			else			{				request = new URLRequest("http://g" + Log.GUID +".api.playtomic.com/v2/leaderboards/list.aspx?swfid=" + Log.SWFID + "&r=" + Math.random());			}						request.data = postdata;			request.method = URLRequestMethod.POST;			sendaction.addEventListener(IOErrorEvent.IO_ERROR, fail);			sendaction.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpstatusignore);			sendaction.addEventListener(SecurityErrorEvent.SECURITY_ERROR, fail);			sendaction.load(request);		}		private static function ProcessScores(loader:URLLoader, callback:Function):void		{						var data:XML = XML(loader["data"]);			var status:int = parseInt(data["status"]);			var errorcode:int = parseInt(data["errorcode"]);			var numscores:int = parseInt(data["numscores"]);			var results:Array = new Array();						if(status == 1)			{				var entries:XMLList = data["score"];				var datestring:String;				var year:int;				var month:int;				var day:int;											for each(var item:XML in entries) 				{					datestring = item["sdate"];									year = int(datestring.substring(datestring.lastIndexOf("/") + 1));					month = int(datestring.substring(0, datestring.indexOf("/")));					day = int(datestring.substring(datestring.indexOf("/" ) +1).substring(0, 2));										var score:PlayerScore = new PlayerScore();					score.SDate = new Date(year, month-1, day);					score.RDate = item["rdate"];					score.Name = item["name"];					score.Points = item["points"];					score.Website = item["website"];					score.Rank = item["rank"];										if(item["fbuserid"])						score.FBUserId = item["fbuserid"];										if(item["custom"])					{									var custom:XMLList = item["custom"];												for each(var cfield:XML in custom.children())						{							score.CustomData[cfield.name()] = cfield.text();						}					}										results.push(score);				}			}						callback(results, numscores, {Success: status == 1, ErrorCode: errorcode});		}	}}